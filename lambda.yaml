AWSTemplateFormatVersion: "2010-09-09"
Description: Stack to deploy lambda function through infrastructure as code.
Parameters:

  LambdaFunctionName:
    ConstraintDescription: must contain only alphanumeric characters.
    Default: UserManagementSystem
    Description: The name of the Lambda function.
    MaxLength: 64
    MinLength: 1
    Type: String

  LambdaHandler:
    Default: com.aws.lambda.user.StreamLambdaHandler::handleRequest
    Description: Package, class and the name of the method within your code that Lambda calls to execute your function.
    MaxLength: 128
    MinLength: 1
    Type: String

  LambdaRuntime:
    Default: java8
    AllowedValues:
      - java8
      - java11
      - dotnetcore2.1
      - dotnetcore3.1
      - go1.x
      - java11
      - java8
      - nodejs10.x
      - nodejs12.x
      - provided
      - python2.7
      - python3.6
      - python3.7
      - python3.8
      - ruby2.5
      - ruby2.7
    Description: Lambda runtime to deploy application.
    Type: String

  LambdaCodeS3Bucket:
    Default: mybucket
    Description: The deployment package for a Lambda function. Location of an object in Amazon S3.
    Type: String

  LambdaCodeS3Key:
    Default: UserManagement-1.0.0.zip
    Description: The deployment package for a Lambda function. Name of the object in Amazon S3.
    Type: String

  LambdaDynamoDBTableARN:
    Description: DynamoDB Table ARN to set up role with the polocies to perfom CRUD operations.
    Type: String

Resources:

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: !Ref LambdaHandler
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Runtime: !Ref LambdaRuntime
      MemorySize: 512
      Timeout: 600
    DependsOn: LambdaPolicy

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1

  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt LambdaLogGroup.Arn
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:Scan
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:PutItem
            Resource: !Ref LambdaDynamoDBTableARN
      Roles:
        - Ref: LambdaRole

Outputs:
  LambdaFunctionArn:
    Description: Lambda function Arn
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: LambdaFunctionArn
  LambdaFunctionName:
    Description: Lambda function name
    Value: !Ref LambdaFunction
    Export:
      Name: LambdaFunctionName